const express = require('express');
const oracledb = require('oracledb');
const cors = require('cors');

const app = express();
app.use(cors());
app.use(express.json());

const dbConfig = {
    user: 'system',
    password: '1234Adey',
    connectString: 'localhost/mike'
};

async function createLargeTable() {
  let connection;
  try {
    connection = await oracledb.getConnection(dbConfig);

    await connection.execute(`
      BEGIN
        EXECUTE IMMEDIATE 'DROP TABLE large_table PURGE';
      EXCEPTION
        WHEN OTHERS THEN
          IF SQLCODE != -942 THEN
            RAISE;
          END IF;
      END;
    `);

    await connection.execute(`
      CREATE TABLE large_table (
        id NUMBER GENERATED BY DEFAULT AS IDENTITY,
        name VARCHAR2(50),
        value NUMBER,
        PRIMARY KEY (id)
      )
    `);

    const insertPromises = [];
    for (let i = 0; i < 100; i++) {
      insertPromises.push(connection.execute(`
        INSERT INTO large_table (name, value) VALUES ('Item ${i}', ${Math.floor(Math.random() * 100)})
      `));
    }
    await Promise.all(insertPromises);

    await connection.commit();
    return { message: 'Large table created and populated with data' };
  } catch (err) {
    console.error(err);
    return { message: 'Error creating or populating large table' };
  } finally {
    if (connection) {
      await connection.close();
    }
  }
}

async function partitionLargeTable() {
  let connection;
  try {
    connection = await oracledb.getConnection(dbConfig);

    await connection.execute(`
      BEGIN
        EXECUTE IMMEDIATE 'ALTER TABLE large_table DROP PARTITION old_data';
      EXCEPTION
        WHEN OTHERS THEN
          IF SQLCODE != -1427 THEN
            RAISE;
          END IF;
      END;
    `);

    await connection.execute(`
      ALTER TABLE large_table
      ADD PARTITION old_data VALUES LESS THAN (10)
      TABLESPACE users
      UPDATE GLOBAL INDEXES
    `);

    await connection.commit();
    return { message: 'Table partitioned' };
  } catch (err) {
    console.error(err);
    return { message: 'Error partitioning table' };
  } finally {
    if (connection) {
      await connection.close();
    }
  }
}

async function getSystemUsage() {
  let connection;
  try {
    connection = await oracledb.getConnection(dbConfig);

    const resultSGA = await connection.execute(`
      SELECT 'SGA' AS COMPONENT, SUM(value)/1024/1024 AS "Memory_MB"
      FROM V$SGA
    `);

    const resultPGA = await connection.execute(`
      SELECT 'PGA' AS COMPONENT, SUM(PGA_USED_MEM)/1024/1024 AS "Memory_MB"
      FROM V$PROCESS
    `);

    const resultCPU = await connection.execute(`
       SELECT * FROM (
            SELECT username, sid, 
                   ROUND((cpu_usage / (
                       SELECT SUM(value) total_cpu_usage
                       FROM gv$sesstat t
                       INNER JOIN gv$session s ON (t.sid = s.sid)
                       INNER JOIN gv$statname n ON (t.statistic# = n.statistic#)
                       WHERE n.name LIKE '%CPU used by this session%'
                       AND NVL(s.sql_exec_start, s.prev_exec_start) >= SYSDATE - 1 / 24
                   )) * 100, 2) cpu_usage_per_cent, 
                   module_info, client_info
            FROM (
                SELECT NVL(s.username, 'Oracle Internal Proc.') username, s.sid, t.value cpu_usage, 
                       NVL(s.module, s.program) module_info, 
                       DECODE(s.osuser, 'oracle', s.client_info, s.osuser) client_info
                FROM gv$sesstat t
                INNER JOIN gv$session s ON (t.sid = s.sid)
                INNER JOIN gv$statname n ON (t.statistic# = n.statistic#)
                WHERE n.name LIKE '%CPU used by this session%'
                AND NVL(s.sql_exec_start, s.prev_exec_start) >= SYSDATE - 1 / 24
            ) s1
        )
        ORDER BY cpu_usage_per_cent DESC
    `);

    const resultStorage = await connection.execute(`
       SELECT tablespace_name, SUM(bytes) / 1024 / 1024 AS mb_used
        FROM DBA_SEGMENTS
        GROUP BY tablespace_name
    `);

    return {
      memory: {
        sga: resultSGA.rows,
        pga: resultPGA.rows,
      },
      cpu: resultCPU.rows,
      storage: resultStorage.rows,
    };
  } catch (err) {
    console.error(err);
    return null;
  } finally {
    if (connection) {
      await connection.close();
    }
  }
}

async function optimizeDatabase() {
  let connection;
  try {
    connection = await oracledb.getConnection(dbConfig);

    // Indexing
    await connection.execute(`
      CREATE INDEX idx_large_table_value ON large_table(value)
    `);

    // Pagination simulation by creating a procedure (as an example)
    await connection.execute(`
      CREATE OR REPLACE PROCEDURE paginate_large_table(
        p_start IN NUMBER,
        p_end IN NUMBER,
        p_cursor OUT SYS_REFCURSOR
      ) AS
      BEGIN
        OPEN p_cursor FOR
          SELECT * FROM (
            SELECT a.*, ROWNUM rnum
            FROM large_table a
            WHERE ROWNUM <= p_end
          )
          WHERE rnum >= p_start;
      END;
    `);

    // Compression (example: table move with compress option)
    await connection.execute(`
      ALTER TABLE large_table MOVE COMPRESS
    `);

    await connection.commit();
    return { message: 'Database optimized' };
  } catch (err) {
    console.error(err);
    return { message: 'Error optimizing database' };
  } finally {
    if (connection) {
      await connection.close();
    }
  }
}

app.get('/create-large-table', async (req, res) => {
  const result = await createLargeTable();
  res.json(result);
});

app.post('/partition-large-table', async (req, res) => {
  const result = await partitionLargeTable();
  res.json(result);
});

app.get('/system-usage', async (req, res) => {
  const usage = await getSystemUsage();
  res.json(usage);
});

app.post('/optimize', async (req, res) => {
  const result = await optimizeDatabase();
  res.json(result);
});

const PORT = 5000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
